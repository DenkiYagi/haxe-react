package react;

import js.html.Element;
import react.ReactComponent;

/**
	https://react.dev/reference/react-dom
**/
#if (!react_global)
@:jsRequire("react-dom")
#end
@:native('ReactDOM')
extern class ReactDOM
{
	/**
		https://react.dev/reference/react-dom/render
	**/
	@:deprecated("Use ReactDOMClient.createRoot")
	public static function render(element:ReactFragment, container:Element, ?callback:Void -> Void):ReactFragment;

	/**
		https://react.dev/reference/react-dom/hydrate
	**/
	@:deprecated("Use ReactDOMClient.hydrateRoot")
	public static function hydrate(element:ReactFragment, container:Element, ?callback:Void -> Void):ReactFragment;

	/**
		https://react.dev/reference/react-dom/unmountComponentAtNode
	**/
	@:deprecated("In React 18, unmountComponentAtNode was replaced by root.unmount()")
	public static function unmountComponentAtNode(container:Element):Bool;

	/**
		https://react.dev/reference/react-dom/findDOMNode
	**/
	@:deprecated
	public static function findDOMNode(component:ReactComponent):Element;

	/**
		https://react.dev/reference/react-dom/createPortal
	**/
	public static function createPortal(child:ReactFragment, container:Element):ReactFragment;

	/**
		Warning:
		Using flushSync is uncommon and can hurt the performance of your app.

		https://react.dev/reference/react-dom/flushSync
	**/
	public static function flushSync(callback:Void->Void):Void;
}

#if (!react_global)
@:jsRequire("react-dom/client")
#end
@:native('ReactDOM')
extern class ReactDOMClient {
	/**
		`createRoot` lets you create a root to display React components inside a
		browser DOM node.

		Notes:
		- If your app is server-rendered, using `createRoot()` is not supported.
		  Use `hydrateRoot()` instead
		- You’ll likely have only one `createRoot` call in your app
		- When you want to render a piece of JSX in a different part of the DOM
		  tree that isn’t a child of your component (for example, a modal or a
		  tooltip), use `ReactDOM.createPortal` instead of `createRoot`

		https://react.dev/reference/react-dom/client/createRoot
	**/
	public static function createRoot(container:Element, ?options:{
		?identifierPrefix:String,
		?onRecoverableError:(err:Any)->Void
	}):RootType;

	/**
		`hydrateRoot` lets you display React components inside a browser DOM
		node whose HTML content was previously generated by `ReactDOMServer`.

		Notes:
		- `hydrateRoot()` expects the rendered content to be identical with the
		  server-rendered content. You should treat mismatches as bugs and fix
		  them
		- In development mode, React warns about mismatches during hydration.
		  There are no guarantees that attribute differences will be patched up
		  in case of mismatches
		- You’ll likely have only one `hydrateRoot` call in your app
		- If your app is client-rendered with no HTML rendered already, using
		  `hydrateRoot()` is not supported. Use `createRoot()` instead


		https://react.dev/reference/react-dom/client/hydrateRoot
	**/
	public static function hydrateRoot(container:Element, element:ReactFragment, ?options:{
		?identifierPrefix:String,
		?onRecoverableError:(err:Any)->Void
	}):RootType;
}

typedef RootType = {
	render:(node:ReactFragment)->Void,
	unmount:()->Void
}
